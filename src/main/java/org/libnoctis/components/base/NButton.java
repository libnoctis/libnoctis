/*
 * Copyright 2015-2016 Adrien "Litarvan" Navratil & Victor "Wytrem"
 *
 * This file is part of Libnoctis.
 *
 * Libnoctis is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * Libnoctis is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
 * A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Libnoctis. If not, see <http://www.gnu.org/licenses/>.
 */
package org.libnoctis.components.base;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.libnoctis.components.NComponent;
import org.libnoctis.input.NListener;
import org.libnoctis.input.NoctisEvent;
import org.libnoctis.input.mouse.MousePressedEvent;
import org.libnoctis.input.mouse.MouseReleasedEvent;
import org.libnoctis.ninepatch.LinkedNinePatch;
import org.libnoctis.ninepatch.NoctisNinePatch;
import org.libnoctis.render.Drawer;
import org.libnoctis.render.gl.GlFont;
import org.libnoctis.render.gl.GlTexture;
import org.libnoctis.theme.ThemeRequireProperty;
import org.libnoctis.util.Dimension;


/**
 * The Noctis Button
 *
 * <p>
 * A button, can be clicked. Click click click. Click click click click click
 * click click click click. Click click. Click.
 * </p>
 *
 * @author Litarvan
 * @version 0.1.0
 * @since 0.0.1
 */
public class NButton extends NComponent implements NListener
{
    public static final String BUTTON_PROPERTY_GROUP = "component.button";
    public static final String BUTTON_TEXTURE_PROPERTY = BUTTON_PROPERTY_GROUP + ".texture";
    public static final String BUTTON_HOVER_TEXTURE_PROPERTY = BUTTON_TEXTURE_PROPERTY + ".hover";
    public static final String BUTTON_DISABLED_TEXTURE_PROPERTY = BUTTON_TEXTURE_PROPERTY + ".disabled";
    public static final String BUTTON_FIXED_PROPERTY = BUTTON_PROPERTY_GROUP + ".size.fixed";

    /**
     * The button text
     */
    private String text;

    /*
     * /** The button font
     */
    // private NFont font;

    /**
     * An event launched when the button is clicked
     */
    private Runnable onClick;

    /**
     * If the button has fixed size
     */
    @ThemeRequireProperty(BUTTON_FIXED_PROPERTY)
    private boolean fixed;

    /**
     * The button texture (can be generated by a nine patch)
     */
    @NotNull
    private GlTexture texture;

    /**
     * The button texture as a nine patch, optional
     */
    @Nullable
    @LinkedNinePatch("texture")
    private NoctisNinePatch texturePatch;

    /**
     * The texture when the mouse is on the button (can be generated by a nine
     * patch)
     */
    @NotNull
    private GlTexture hoverTexture;

    /**
     * The texture when the mouse is on the button, as a nine patch, optional
     */
    @Nullable
    @LinkedNinePatch("hoverTexture")
    private NoctisNinePatch hoverTexturePatch;

    /**
     * The texture when the button is disabled (can be generated by a nine
     * patch)
     */
    @Nullable
    private GlTexture disabledTexture;

    /**
     * The texture when the button is disabled, as a nine patch, optional
     */
    @Nullable
    @LinkedNinePatch("disabledTexture")
    private NoctisNinePatch disabledTexturePatch;

    /**
     * True if the button is clicked
     */
    private boolean clicked = false;

    /**
     * True if the button is disabled
     */
    private boolean disabled = false;

    /**
     * The theme property containing the texture path
     */
    @NotNull
    private String textureProperty;

    /**
     * The theme property containing the hover texture path
     */
    @NotNull
    private String hoverTextureProperty;

    /**
     * The theme property containing the disabled texture path
     */
    @NotNull
    private String disabledTextureProperty;

    /**
     * The font used to draw the text
     */
    @Nullable
    private GlFont font;

    /**
     * The Noctis Button
     */
    public NButton()
    {
        this("");
    }

    /**
     * The Noctis Button
     *
     * @param text The button text
     */
    public NButton(@Nullable String text)
    {
        this(text, BUTTON_TEXTURE_PROPERTY, BUTTON_HOVER_TEXTURE_PROPERTY, BUTTON_DISABLED_TEXTURE_PROPERTY);
        setPreferredSize(new Dimension(200, 100));
    }

    /**
     * The Noctis Button
     *
     * @param textureProperty The theme property containing the texture path
     * @param hoverTextureProperty The theme property containing the hover
     *        texture path
     */
    public NButton(@NotNull String textureProperty, @NotNull String hoverTextureProperty)
    {
        this("", textureProperty, hoverTextureProperty, "");
    }

    /**
     * The Noctis Button
     *
     * @param textureProperty The theme property containing the texture path
     * @param hoverTextureProperty The theme property containing the hover
     *        texture path
     * @param disabledTextureProperty The theme property containing the disabled
     *        texture path
     */
    public NButton(@NotNull String textureProperty, @NotNull String hoverTextureProperty, @NotNull String disabledTextureProperty)
    {
        this("", textureProperty, hoverTextureProperty, disabledTextureProperty);
    }

    /**
     * The Noctis Button
     *
     * @param text The button text
     * @param textureProperty The theme property containing the texture path
     * @param hoverTextureProperty The theme property containing the hover
     *        texture path
     * @param disabledTextureProperty The theme property containing the disabled
     *        texture path
     */
    public NButton(@Nullable String text, @NotNull String textureProperty, @NotNull String hoverTextureProperty, @NotNull String disabledTextureProperty)
    {
        this.text = text;
        this.textureProperty = textureProperty;
        this.hoverTextureProperty = hoverTextureProperty;
        this.disabledTextureProperty = disabledTextureProperty;

        this.registerListener(new NButtonMouseListener());
    }

    @Override
    protected void init()
    {
        super.init();

        this.registerNinePatch("texturePatch", theme().requireProp(textureProperty));
        this.registerNinePatch("hoverTexturePatch", theme().requireProp(hoverTextureProperty));
        this.registerNinePatch("disabledTexturePatch", theme().prop(disabledTextureProperty));

        if (fixed)
        {
            this.setWidth(Integer.parseInt(theme().requireProp("component.button.size.width")));
            this.setHeight(Integer.parseInt(theme().requireProp("component.button.size.height")));
        }
    }

    /**
     * @return If the button is disabled
     */
    public boolean isDisabled()
    {
        return disabled;
    }

    /**
     * Set the button disabled or not
     *
     * @param disabled If the button should be disabled or not
     */
    public void setDisabled(boolean disabled)
    {
        this.disabled = disabled;
    }

    /**
     * @return If the button is clicked
     */
    public boolean isClicked()
    {
        return clicked;
    }

    /**
     * @return If the size of the button is fixed
     */
    public boolean isFixed()
    {
        return fixed;
    }

    /**
     * @return Return the button texture (can be null if the texture is a nine
     *         patch, if it is, use #getTexturePatch)
     */
    @NotNull
    public GlTexture getTexture()
    {
        return texture;
    }

    /**
     * @return The texture when the mouse is hover the button. (can be null if
     *         the the theme didn't give one, or if it is a nine patch (if it
     *         is, use #getHoverTexturePatch).
     */
    @NotNull
    public GlTexture getHoverTexture()
    {
        return hoverTexture;
    }

    /**
     * @return The button texture when it is disabled (can be null if the theme
     *         didn't give one, or if it is a nine patch (if it is, use
     *         #getDisabledTexturePatch).
     */
    @NotNull
    public GlTexture getDisabledTexture()
    {
        return disabledTexture;
    }

    /**
     * @return Return the button texture, as a nine patch (can be null if the
     *         texture is not a nine patch, if it is, use #getTexture)
     */
    @Nullable
    public NoctisNinePatch getTexturePatch()
    {
        return texturePatch;
    }

    /**
     * @return The texture when the mouse is hover the button, as a nine patch.
     *         (can be null if the the theme didn't give one, or if it is not a
     *         nine patch (if it is, use #getHoverTexture).
     */
    @Nullable
    public NoctisNinePatch getHoverTexturePatch()
    {
        return hoverTexturePatch;
    }

    /**
     * @return The button texture when it is disabled, as a nine patch (can be
     *         null if the theme didn't give one, or if it is not a nine patch
     *         (if it is, use #getDisabledTexture).
     */
    @Nullable
    public NoctisNinePatch getDisabledTexturePatch()
    {
        return disabledTexturePatch;
    }

    /**
     * Define an action that will be executed when the user click the button
     *
     * @param onClick The on click action to define
     */
    public void setOnClick(Runnable onClick)
    {
        this.onClick = onClick;
    }

    /**
     * @return The button text
     */
    public String getText()
    {
        return text;
    }

    /**
     * Set the button text
     *
     * @param text The new button text
     */
    public void setText(String text)
    {
        this.text = text;

        repaint();
    }

    /**
     * @return The font used by this button to draw its text
     */
    @Nullable
    public GlFont getFont()
    {
        return font;
    }

    /**
     * Set the font using to draw the button text
     *
     * @param font The new font to use (if null, default font will be used)
     */
    public void setFont(@Nullable GlFont font)
    {
        this.font = font;
    }

    @Override
    protected void paintComponent(Drawer drawer)
    {
        super.paintComponent(drawer);

        if (disabled && disabledTexture == null)
        {
            throw new RuntimeException("Can't set the button disabled because there isn't any disabled texture");
        }

        drawer.drawTexture(getX(), getY(), this.getWidth(), this.getHeight(), disabled ? disabledTexture : (isHovered() ? hoverTexture : texture));

        GlFont oldFont = null;

        if (font != null)
        {
            oldFont = drawer.getFont();
            drawer.setFont(font);
        }

        drawer.drawCenteredString(text, getX() + getWidth() / 2, getY() + getHeight() / 2);

        if (oldFont != null)
           drawer.setFont(oldFont);
    }

    private class NButtonMouseListener implements NListener
    {
        @NoctisEvent
        private void pressed(MousePressedEvent event)
        {
            clicked = isHovered();

            if (clicked && onClick != null && !isDisabled())
                onClick.run();
        }

        @NoctisEvent
        private void released(MouseReleasedEvent event)
        {
            clicked = false;
        }
    }
}
